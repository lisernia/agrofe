# Default to info level output; this is very handy if you eventually use Hibernate as well.

# A1 is set to be a ConsoleAppender.
log4j.appender.console=org.apache.log4j.ConsoleAppender

# console uses PatternLayout.
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%p] %c{2} %m%n

log4j.rootCategory=info, console


# Outputs a list of pages, components and mixins at startup.
log4j.logger.org.apache.tapestry5.services.TapestryModule.ComponentClassResolver=info

# Outputs startup statistics; elapsed time to setup and initialize the registry, and a list of
# available services.
log4j.logger.org.apache.tapestry5.TapestryFilter=info


# Turning on debug mode for a page's or component's transformer logger
# will show all of the code changes that occur when the
# class is loaded.

# log4j.logger.tapestry.transformer.de.laliluna.example.pages.Index=debug

# Turning on debug mode for a component's events logger will show all the events triggered on the
# component, and which component methods are invoked as a result.

# log4j.logger.tapestry.events.de.laliluna.example.pages.Index=debug

# Turning on trace mode for a page's render logger provides extended information about every step
# in rendering (this is not generally helpful).  Turning on debug mode will add a one-line
# summary that includes the elapsed render time, which can be useful in tracking down
# performance issues.

# log4j.logger.tapestry.render.de.laliluna.example.pages.Index=debug

# Turn on some verbose debugging about everything in the application. This is nice initially,
# while getting everything set up.  You'll probably want to remove this once you are 
# up and running, replacing it with more selective debugging output.
log4j.logger.de.laliluna.example=debug